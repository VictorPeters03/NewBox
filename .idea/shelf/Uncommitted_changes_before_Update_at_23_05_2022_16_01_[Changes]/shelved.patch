Index: NewBoxAPI/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import MySQLdb\r\nfrom fastapi import FastAPI\r\nimport socket\r\nimport json\r\n\r\napp = FastAPI()\r\n\r\n# endpoint for setting the volume\r\n@app.put(\"/adminpanel/volume/{amount}\")\r\nasync def set_volume(amount: int):\r\n    return\r\n\r\n\r\n# endpoint for setting the maximum volume\r\n@app.put(\"/adminpanel/maxvolume/{amount}\")\r\nasync def set_max_volume(amount: int):\r\n    return\r\n\r\n\r\n# endpoint for setting the minimum volume\r\n@app.put(\"/adminpanel/minvolume/{amount}\")\r\nasync def set_min_volume(amount: int):\r\n    return\r\n\r\n\r\n# endpoint for adding a song to the queue\r\n@app.put(\"/use/queue/{id}\")\r\nasync def add_to_queue(id: str):\r\n    return\r\n\r\n\r\n# endpoint for getting the queue\r\n@app.get(\"/use/getqueue\")\r\nasync def get_queue():\r\n    return\r\n\r\n\r\n# endpoint for playing songs\r\n@app.get(\"/use/play/{id}\")\r\nasync def play_music(id: str):\r\n    return\r\n\r\n\r\n# endpoint to toggle the state of the current song\r\n@app.put(\"/use/toggleplay\")\r\nasync def toggle_music():\r\n    return\r\n\r\n# endpoint for searching songs in the local database\r\n@app.get(\"/use/search/{key}\")\r\nasync def search_music(key: str):\r\n    return\r\n\r\n\r\n# endpoint for getting the ip off the rpi\r\n@app.get(\"/adminpanel/ip\")\r\nasync def get_ip():\r\n    return json.dumps({\"ip\": socket.gethostbyname(socket.gethostname())})\r\n\r\n# endpoint to toggle the state of the current song\r\n@app.get(\"/use/debug\")\r\nasync def debug():\r\n\r\n    try:\r\n        db = MySQLdb.connect(\"127.0.0.1\", \"root\", \"\", \"djangosearchbartest\")\r\n    except:\r\n        return \"Can't connect to database\"\r\n    print(\"Connection established\")\r\n\r\n    cursor = db.cursor()\r\n\r\n    sql = \"SELECT * FROM `core_song`;\"\r\n\r\n    cursor.execute(sql)\r\n\r\n    songs = cursor.fetchall()\r\n\r\n    db.close()\r\n\r\n    jsonString = json.dumps(songs)\r\n\r\n    return jsonString\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NewBoxAPI/main.py b/NewBoxAPI/main.py
--- a/NewBoxAPI/main.py	(revision 955035beed02f1770e4b4c8c613a378b7a302244)
+++ b/NewBoxAPI/main.py	(date 1653314487835)
@@ -26,8 +26,30 @@
 # endpoint for adding a song to the queue
 @app.put("/use/queue/{id}")
 async def add_to_queue(id: str):
-    return
+    # sets up a connection to the database
+    try:
+        db = MySQLdb.connect("127.0.0.1", "root", "", "djangosearchbartest")
+    except:
+        return "Can't connect to database"
+
+    cursor = db.cursor()
+
+    # the SQL statement
+    sql = "SELECT * FROM `core_song` WHERE id = %s;"
+    song_id = id
+
+    # executes the statement
+    cursor.execute(sql, song_id)
+
+    # takes the data from the statement and places it in a variable
+    songs = cursor.fetchall()
 
+    db.close()
+
+    # takes the variable and puts it in a json
+    jsonString = json.dumps(songs)
+
+    return jsonString
 
 # endpoint for getting the queue
 @app.get("/use/getqueue")
@@ -57,26 +79,7 @@
 async def get_ip():
     return json.dumps({"ip": socket.gethostbyname(socket.gethostname())})
 
-# endpoint to toggle the state of the current song
+# endpoint to debug and test functions
 @app.get("/use/debug")
 async def debug():
-
-    try:
-        db = MySQLdb.connect("127.0.0.1", "root", "", "djangosearchbartest")
-    except:
-        return "Can't connect to database"
-    print("Connection established")
-
-    cursor = db.cursor()
-
-    sql = "SELECT * FROM `core_song`;"
-
-    cursor.execute(sql)
-
-    songs = cursor.fetchall()
-
-    db.close()
-
-    jsonString = json.dumps(songs)
-
-    return jsonString
+    return
\ No newline at end of file
