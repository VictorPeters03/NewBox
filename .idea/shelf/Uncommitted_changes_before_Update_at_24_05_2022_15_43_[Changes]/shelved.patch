Index: NewBoxAPI/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import MySQLdb\r\nfrom fastapi import FastAPI\r\nimport socket\r\nimport json\r\n\r\napp = FastAPI()\r\n\r\n# endpoint for setting the volume\r\n@app.put(\"/adminpanel/volume/{amount}\")\r\nasync def set_volume(amount: int):\r\n    valid = False\r\n    while not valid:\r\n        try:\r\n            volume = amount            \r\n            if (volume <= 100) and (volume >= 0):\r\n                volume = json.dumps({\"volume\": amount})\r\n                valid = True\r\n            else: \r\n                 volume = json.dumps({\"volume\": \"null\"})\r\n                 valid = True\r\n        except ValueError:\r\n            valid = False\r\n    return volume\r\n\r\n\r\n# endpoint for setting the maximum volume\r\n@app.put(\"/adminpanel/maxvolume/{amount}\")\r\nasync def set_max_volume(amount: int):\r\n    return\r\n\r\n\r\n# endpoint for setting the minimum volume\r\n@app.put(\"/adminpanel/minvolume/{amount}\")\r\nasync def set_min_volume(amount: int):\r\n    return\r\n\r\n\r\n# endpoint for adding a song to the queue\r\n@app.put(\"/use/queue/{id}\")\r\nasync def add_to_queue(id: str):\r\n    return\r\n\r\n# endpoint for getting the queue\r\n@app.get(\"/use/getqueue\")\r\nasync def get_queue():\r\n    return\r\n\r\n\r\n# endpoint for playing songs\r\n@app.get(\"/use/play/{id}\")\r\nasync def play_music(id: str):\r\n    # needs an if statement added to check if the queue is empty\r\n\r\n    # sets up a connection to the database\r\n    try:\r\n        db = MySQLdb.connect(\"127.0.0.1\", \"root\", \"\", \"djangosearchbartest\")\r\n    except:\r\n        return \"Can't connect to database\"\r\n\r\n    cursor = db.cursor()\r\n\r\n    # the SQL statement\r\n    sql = \"SELECT * FROM `core_song`;\"\r\n    # song_id = id\r\n    #  WHERE id = %s\r\n    # executes the statement\r\n    cursor.execute(sql)\r\n    # , song_id\r\n    # takes the data from the statement and places it in a variable\r\n    songs = cursor.fetchall()\r\n\r\n    db.close()\r\n\r\n    dictionary = {}\r\n\r\n    for song in songs:\r\n        dictionary.update({\"id\": song[0], \"artist\": song[1], \"title\": song[2]})\r\n\r\n    return dictionary\r\n\r\n# endpoint to toggle the state of the current song\r\n@app.put(\"/use/toggleplay\")\r\nasync def toggle_music():\r\n    return\r\n\r\n# endpoint for searching songs in the local database\r\n@app.get(\"/use/search/{key}\")\r\nasync def search_music(key: str):\r\n    return\r\n\r\n\r\n# endpoint for getting the ip off the rpi\r\n@app.get(\"/adminpanel/ip\")\r\nasync def get_ip():\r\n    return json.dumps({\"ip\": socket.gethostbyname(socket.gethostname())})\r\n\r\n# endpoint to debug and test functions\r\n@app.get(\"/use/debug\")\r\nasync def debug():\r\n    return\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NewBoxAPI/main.py b/NewBoxAPI/main.py
--- a/NewBoxAPI/main.py	(revision 75cabd9c26218ae08884df1f3190a03440a2f96b)
+++ b/NewBoxAPI/main.py	(date 1653399802361)
@@ -71,10 +71,12 @@
 
     db.close()
 
-    dictionary = {}
+    # creates an empty dictionary
+    dictionary = []
 
+    # places the songs in a list in the dictionary
     for song in songs:
-        dictionary.update({"id": song[0], "artist": song[1], "title": song[2]})
+        dictionary.append({"id": song[0], "artist": song[1], "title": song[2]})
 
     return dictionary
 
